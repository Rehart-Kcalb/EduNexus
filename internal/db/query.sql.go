// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCategoryCourse = `-- name: AddCategoryCourse :exec
Insert into course_categories(course_id,category_id) values ($1,$2)
`

type AddCategoryCourseParams struct {
	CourseID   int64 `json:"course_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) AddCategoryCourse(ctx context.Context, arg AddCategoryCourseParams) error {
	_, err := q.db.Exec(ctx, addCategoryCourse, arg.CourseID, arg.CategoryID)
	return err
}

const addTeacher = `-- name: AddTeacher :exec
Insert into course_teachers(user_id,course_id) values ($1,$2)
`

type AddTeacherParams struct {
	UserID   int64 `json:"user_id"`
	CourseID int64 `json:"course_id"`
}

func (q *Queries) AddTeacher(ctx context.Context, arg AddTeacherParams) error {
	_, err := q.db.Exec(ctx, addTeacher, arg.UserID, arg.CourseID)
	return err
}

const allCategories = `-- name: AllCategories :many
SELECT
  "name",
  "color"
FROM
  categories
`

type AllCategoriesRow struct {
	Name  string `json:"name"`
	Color int32  `json:"color"`
}

func (q *Queries) AllCategories(ctx context.Context) ([]AllCategoriesRow, error) {
	rows, err := q.db.Query(ctx, allCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllCategoriesRow
	for rows.Next() {
		var i AllCategoriesRow
		if err := rows.Scan(&i.Name, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkEnrollment = `-- name: CheckEnrollment :one
select enrolled_on from enrollments where course_id = $1 and user_id = $2
`

type CheckEnrollmentParams struct {
	CourseID int64 `json:"course_id"`
	UserID   int64 `json:"user_id"`
}

func (q *Queries) CheckEnrollment(ctx context.Context, arg CheckEnrollmentParams) (pgtype.Date, error) {
	row := q.db.QueryRow(ctx, checkEnrollment, arg.CourseID, arg.UserID)
	var enrolled_on pgtype.Date
	err := row.Scan(&enrolled_on)
	return enrolled_on, err
}

const countCourses = `-- name: CountCourses :one
select count(title) from filter($1,$2::bigint[])
`

type CountCoursesParams struct {
	TitleParam string  `json:"title_param"`
	Column2    []int64 `json:"column_2"`
}

func (q *Queries) CountCourses(ctx context.Context, arg CountCoursesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countCourses, arg.TitleParam, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAssignment = `-- name: CreateAssignment :exec
Insert into assignments(module_id,course_id,title,description,content,assignment_type_id) values($1,$2,$3,$4,$5,$6)
`

type CreateAssignmentParams struct {
	ModuleID         int64  `json:"module_id"`
	CourseID         int64  `json:"course_id"`
	Title            string `json:"title"`
	Description      string `json:"description"`
	Content          []byte `json:"content"`
	AssignmentTypeID int64  `json:"assignment_type_id"`
}

func (q *Queries) CreateAssignment(ctx context.Context, arg CreateAssignmentParams) error {
	_, err := q.db.Exec(ctx, createAssignment,
		arg.ModuleID,
		arg.CourseID,
		arg.Title,
		arg.Description,
		arg.Content,
		arg.AssignmentTypeID,
	)
	return err
}

const createCourse = `-- name: CreateCourse :one
Insert into courses(title,description,image,course_provider) values ($1,$2,$3,$4) returning id
`

type CreateCourseParams struct {
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Image          pgtype.Text `json:"image"`
	CourseProvider int64       `json:"course_provider"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.Title,
		arg.Description,
		arg.Image,
		arg.CourseProvider,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createModule = `-- name: CreateModule :one
Insert into modules(title,course_id) values ($1,$2) returning id
`

type CreateModuleParams struct {
	Title    string `json:"title"`
	CourseID int64  `json:"course_id"`
}

func (q *Queries) CreateModule(ctx context.Context, arg CreateModuleParams) (int64, error) {
	row := q.db.QueryRow(ctx, createModule, arg.Title, arg.CourseID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSubmission = `-- name: CreateSubmission :exec
Insert into submissions(content,assignment_id,info,user_id) values ($1,$2,$3,$4)
`

type CreateSubmissionParams struct {
	Content      []byte      `json:"content"`
	AssignmentID int64       `json:"assignment_id"`
	Info         pgtype.Text `json:"info"`
	UserID       int64       `json:"user_id"`
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) error {
	_, err := q.db.Exec(ctx, createSubmission,
		arg.Content,
		arg.AssignmentID,
		arg.Info,
		arg.UserID,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO
  users ("login", "password", "user_role_id")
VALUES
  ($1, $2, 1)
`

type CreateUserParams struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Login, arg.Password)
	return err
}

const enrollIntoCourse = `-- name: EnrollIntoCourse :exec
INSERT INTO
  enrollments (course_id, user_id, enrolled_on)
VALUES
  (
    $1,
    $2,
    NOW()
  )
`

type EnrollIntoCourseParams struct {
	CourseID int64 `json:"course_id"`
	UserID   int64 `json:"user_id"`
}

func (q *Queries) EnrollIntoCourse(ctx context.Context, arg EnrollIntoCourseParams) error {
	_, err := q.db.Exec(ctx, enrollIntoCourse, arg.CourseID, arg.UserID)
	return err
}



const getAllSubmissions = `-- name: GetAllSubmissions :many
select s.id, s.assignment_id, s.delay, s.content, s.info, s.user_id from submissions s 
left join assignments on s.assignment_id = assignments.id
left join courses on courses.id = assignments.course_id
where assignments.course_id = $1
`

func (q *Queries) GetAllSubmissions(ctx context.Context, courseID int64) ([]Submission, error) {
	rows, err := q.db.Query(ctx, getAllSubmissions, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Submission
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.AssignmentID,
			&i.Delay,
			&i.Content,
			&i.Info,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssignmentById = `-- name: GetAssignmentById :one
select id,title,content::text,description,assignment_type_id from assignments where id = $1 limit 1
`

type GetAssignmentByIdRow struct {
	ID               int64  `json:"id"`
	Title            string `json:"title"`
	Content          string `json:"content"`
	Description      string `json:"description"`
	AssignmentTypeID int64  `json:"assignment_type_id"`
}

func (q *Queries) GetAssignmentById(ctx context.Context, id int64) (GetAssignmentByIdRow, error) {
	row := q.db.QueryRow(ctx, getAssignmentById, id)
	var i GetAssignmentByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Description,
		&i.AssignmentTypeID,
	)
	return i, err
}

const getAssignments = `-- name: GetAssignments :many
select id, module_id, course_id, title, description, content, days, assignment_type_id from assignments where course_id = $1 and assignment_type_id <> 1
`

func (q *Queries) GetAssignments(ctx context.Context, courseID int64) ([]Assignment, error) {
	rows, err := q.db.Query(ctx, getAssignments, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assignment
	for rows.Next() {
		var i Assignment
		if err := rows.Scan(
			&i.ID,
			&i.ModuleID,
			&i.CourseID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Days,
			&i.AssignmentTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryId = `-- name: GetCategoryId :one
select id from categories where name=$1 limit 1
`

func (q *Queries) GetCategoryId(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, getCategoryId, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getClaimsByLogin = `-- name: GetClaimsByLogin :one
SELECT
  users.id,
  user_roles.title
FROM
  users
  LEFT JOIN user_roles ON user_roles.id = users.user_role_id
WHERE
  users.login = $1
`

type GetClaimsByLoginRow struct {
	ID    int64       `json:"id"`
	Title pgtype.Text `json:"title"`
}

func (q *Queries) GetClaimsByLogin(ctx context.Context, login string) (GetClaimsByLoginRow, error) {
	row := q.db.QueryRow(ctx, getClaimsByLogin, login)
	var i GetClaimsByLoginRow
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getCourseDetails = `-- name: GetCourseDetails :one
SELECT
  c.description,c.id,c.image
FROM
  courses c where c.id = $1
`

type GetCourseDetailsRow struct {
	Description string      `json:"description"`
	ID          int64       `json:"id"`
	Image       pgtype.Text `json:"image"`
}

func (q *Queries) GetCourseDetails(ctx context.Context, id int64) (GetCourseDetailsRow, error) {
	row := q.db.QueryRow(ctx, getCourseDetails, id)
	var i GetCourseDetailsRow
	err := row.Scan(&i.Description, &i.ID, &i.Image)
	return i, err
}

const getCourseEnrolledAmount = `-- name: GetCourseEnrolledAmount :one
select count(id) from enrollments where enrollments.course_id = $1
`

func (q *Queries) GetCourseEnrolledAmount(ctx context.Context, courseID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCourseEnrolledAmount, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCourseId = `-- name: GetCourseId :one
select id from courses where title = $1 limit 1
`

func (q *Queries) GetCourseId(ctx context.Context, title string) (int64, error) {
	row := q.db.QueryRow(ctx, getCourseId, title)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCourseLectures = `-- name: GetCourseLectures :many
select a.title, a.id  as assignment_id from courses c 
left join modules m on m.course_id = c.id
left join assignments a on a.module_id = m.id
where  c.id = $1 and a.id is not null and a.assignment_type_id = 1
`

type GetCourseLecturesRow struct {
	Title        pgtype.Text `json:"title"`
	AssignmentID pgtype.Int8 `json:"assignment_id"`
}

func (q *Queries) GetCourseLectures(ctx context.Context, id int64) ([]GetCourseLecturesRow, error) {
	rows, err := q.db.Query(ctx, getCourseLectures, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourseLecturesRow
	for rows.Next() {
		var i GetCourseLecturesRow
		if err := rows.Scan(&i.Title, &i.AssignmentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseLecturesByModuleId = `-- name: GetCourseLecturesByModuleId :many
select a.id, a.module_id, a.course_id, a.title, a.description, a.content, a.days, a.assignment_type_id from assignments a 
left join modules m on m.id = $1
where a.assignment_type_id = 1
`

func (q *Queries) GetCourseLecturesByModuleId(ctx context.Context, id int64) ([]Assignment, error) {
	rows, err := q.db.Query(ctx, getCourseLecturesByModuleId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assignment
	for rows.Next() {
		var i Assignment
		if err := rows.Scan(
			&i.ID,
			&i.ModuleID,
			&i.CourseID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Days,
			&i.AssignmentTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseModules = `-- name: GetCourseModules :many
SELECT
  modules.title
FROM
  modules
  INNER JOIN courses ON courses.id = modules.course_id
WHERE
  courses.title = $1
`

func (q *Queries) GetCourseModules(ctx context.Context, title string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCourseModules, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var title string
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseTeachers = `-- name: GetCourseTeachers :many
SELECT
  u.firstname,u.surname,u.profile
FROM
  courses
  INNER JOIN course_teachers ct ON ct.course_id = courses.id 
  inner join users u on u.id = ct.user_id
  where ct.course_id = $1 AND u.user_role_id = 1
`

type GetCourseTeachersRow struct {
	Firstname pgtype.Text `json:"firstname"`
	Surname   pgtype.Text `json:"surname"`
	Profile   pgtype.Text `json:"profile"`
}

func (q *Queries) GetCourseTeachers(ctx context.Context, courseID int64) ([]GetCourseTeachersRow, error) {
	rows, err := q.db.Query(ctx, getCourseTeachers, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourseTeachersRow
	for rows.Next() {
		var i GetCourseTeachersRow
		if err := rows.Scan(&i.Firstname, &i.Surname, &i.Profile); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLectureContent = `-- name: GetLectureContent :one
select title, content::text from assignments
where assignments.id = $1
`

type GetLectureContentRow struct {
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) GetLectureContent(ctx context.Context, id int64) (GetLectureContentRow, error) {
	row := q.db.QueryRow(ctx, getLectureContent, id)
	var i GetLectureContentRow
	err := row.Scan(&i.Title, &i.Content)
	return i, err
}

const getModuleId = `-- name: GetModuleId :one
select id, title, course_id from modules where course_id = $1 and title = $2
`

type GetModuleIdParams struct {
	CourseID int64  `json:"course_id"`
	Title    string `json:"title"`
}

func (q *Queries) GetModuleId(ctx context.Context, arg GetModuleIdParams) (Module, error) {
	row := q.db.QueryRow(ctx, getModuleId, arg.CourseID, arg.Title)
	var i Module
	err := row.Scan(&i.ID, &i.Title, &i.CourseID)
	return i, err
}

const getMyCourses = `-- name: GetMyCourses :many
SELECT
  courses.title,
  courses.image,
  users.firstname AS organization_name,
  users.profile as organization_logo
FROM
  courses
  LEFT JOIN users ON users.id = courses.course_provider
WHERE
  users.id = courses.course_provider
  AND courses.id IN (
    SELECT
      courses.id
    FROM
      courses
      INNER JOIN enrollments ON enrollments.course_id = courses.id
    WHERE
      enrollments.user_id = $1
  )
`

type GetMyCoursesRow struct {
	Title            string      `json:"title"`
	Image            pgtype.Text `json:"image"`
	OrganizationName pgtype.Text `json:"organization_name"`
	OrganizationLogo pgtype.Text `json:"organization_logo"`
}

func (q *Queries) GetMyCourses(ctx context.Context, userID int64) ([]GetMyCoursesRow, error) {
	rows, err := q.db.Query(ctx, getMyCourses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMyCoursesRow
	for rows.Next() {
		var i GetMyCoursesRow
		if err := rows.Scan(
			&i.Title,
			&i.Image,
			&i.OrganizationName,
			&i.OrganizationLogo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyTeached = `-- name: GetMyTeached :many
Select id, title, description, image, course_provider, user_id, course_id from courses 
left join course_teachers on courses.id = course_teachers.course_id
where course_teachers.user_id = $1
`

type GetMyTeachedRow struct {
	ID             int64       `json:"id"`
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Image          pgtype.Text `json:"image"`
	CourseProvider int64       `json:"course_provider"`
	UserID         pgtype.Int8 `json:"user_id"`
	CourseID       pgtype.Int8 `json:"course_id"`
}

func (q *Queries) GetMyTeached(ctx context.Context, userID int64) ([]GetMyTeachedRow, error) {
	rows, err := q.db.Query(ctx, getMyTeached, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMyTeachedRow
	for rows.Next() {
		var i GetMyTeachedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Image,
			&i.CourseProvider,
			&i.UserID,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPasswordByLogin = `-- name: GetPasswordByLogin :one
SELECT
  PASSWORD
FROM
  users
WHERE
  login = $1
`

func (q *Queries) GetPasswordByLogin(ctx context.Context, login string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordByLogin, login)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getProfileInfo = `-- name: GetProfileInfo :one
select firstname,description,profile from users where users.id = $1
`

type GetProfileInfoRow struct {
	Firstname   pgtype.Text `json:"firstname"`
	Description pgtype.Text `json:"description"`
	Profile     pgtype.Text `json:"profile"`
}

func (q *Queries) GetProfileInfo(ctx context.Context, id int64) (GetProfileInfoRow, error) {
	row := q.db.QueryRow(ctx, getProfileInfo, id)
	var i GetProfileInfoRow
	err := row.Scan(&i.Firstname, &i.Description, &i.Profile)
	return i, err
}

const getReadedLecturesByModule = `-- name: GetReadedLecturesByModule :many
SELECT 
    m.id AS module_id,
    m.title AS module_name,
    a.id AS assignment_id,
	a.assignment_type_id,
    COALESCE(pr.done IS NOT NULL, FALSE) AS read
  FROM 
    modules m
  LEFT JOIN 
    assignments a ON m.id = a.module_id
  LEFT JOIN 
    progress pr ON a.id = pr.assignment_id
where m.id = $1 and pr.user_id = $2
`

type GetReadedLecturesByModuleParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

type GetReadedLecturesByModuleRow struct {
	ModuleID         int64       `json:"module_id"`
	ModuleName       string      `json:"module_name"`
	AssignmentID     pgtype.Int8 `json:"assignment_id"`
	AssignmentTypeID pgtype.Int8 `json:"assignment_type_id"`
	Read             interface{} `json:"read"`
}

func (q *Queries) GetReadedLecturesByModule(ctx context.Context, arg GetReadedLecturesByModuleParams) ([]GetReadedLecturesByModuleRow, error) {
	rows, err := q.db.Query(ctx, getReadedLecturesByModule, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReadedLecturesByModuleRow
	for rows.Next() {
		var i GetReadedLecturesByModuleRow
		if err := rows.Scan(
			&i.ModuleID,
			&i.ModuleName,
			&i.AssignmentID,
			&i.AssignmentTypeID,
			&i.Read,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAssignmentDone = `-- name: MarkAssignmentDone :exec
insert into progress(assignment_id,user_id,done,pass) values ($1,$2,now(),true)
`

type MarkAssignmentDoneParams struct {
	AssignmentID int64 `json:"assignment_id"`
	UserID       int64 `json:"user_id"`
}

func (q *Queries) MarkAssignmentDone(ctx context.Context, arg MarkAssignmentDoneParams) error {
	_, err := q.db.Exec(ctx, markAssignmentDone, arg.AssignmentID, arg.UserID)
	return err
}

const newLecture = `-- name: NewLecture :exec
insert into assignments (module_id,course_id,title,description,content,assignment_type_id)
values ($1,$2,$3,$4,$5,1)
`

type NewLectureParams struct {
	ModuleID    int64  `json:"module_id"`
	CourseID    int64  `json:"course_id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Content     []byte `json:"content"`
}

func (q *Queries) NewLecture(ctx context.Context, arg NewLectureParams) error {
	_, err := q.db.Exec(ctx, newLecture,
		arg.ModuleID,
		arg.CourseID,
		arg.Title,
		arg.Description,
		arg.Content,
	)
	return err
}

const updateProfileInfo = `-- name: UpdateProfileInfo :exec
Update users set firstname = $1, description = $2, profile = $3 where users.id = $4
`

type UpdateProfileInfoParams struct {
	Firstname   pgtype.Text `json:"firstname"`
	Description pgtype.Text `json:"description"`
	Profile     pgtype.Text `json:"profile"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateProfileInfo(ctx context.Context, arg UpdateProfileInfoParams) error {
	_, err := q.db.Exec(ctx, updateProfileInfo,
		arg.Firstname,
		arg.Description,
		arg.Profile,
		arg.ID,
	)
	return err
}
