// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: course_info.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCourseDetails = `-- name: GetCourseDetails :one
SELECT
  c.description,c.id,c.image
FROM
  courses c where c.id = $1
`

type GetCourseDetailsRow struct {
	Description string      `json:"description"`
	ID          int64       `json:"id"`
	Image       pgtype.Text `json:"image"`
}

func (q *Queries) GetCourseDetails(ctx context.Context, id int64) (GetCourseDetailsRow, error) {
	row := q.db.QueryRow(ctx, getCourseDetails, id)
	var i GetCourseDetailsRow
	err := row.Scan(&i.Description, &i.ID, &i.Image)
	return i, err
}

const getCourseEnrolledAmount = `-- name: GetCourseEnrolledAmount :one
select count(id) from enrollments where enrollments.course_id = $1
`

func (q *Queries) GetCourseEnrolledAmount(ctx context.Context, courseID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCourseEnrolledAmount, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCourseId = `-- name: GetCourseId :one
select id from courses where title = $1 limit 1
`

func (q *Queries) GetCourseId(ctx context.Context, title string) (int64, error) {
	row := q.db.QueryRow(ctx, getCourseId, title)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCourseModules = `-- name: GetCourseModules :many
SELECT
  modules.title
FROM
  modules
  INNER JOIN courses ON courses.id = modules.course_id
WHERE
  courses.title = $1
`

func (q *Queries) GetCourseModules(ctx context.Context, title string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCourseModules, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var title string
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseTeachers = `-- name: GetCourseTeachers :many
SELECT
  u.firstname,u.surname,u.profile
FROM
  courses
  INNER JOIN course_teachers ct ON ct.course_id = courses.id 
  inner join users u on u.id = ct.user_id
  where ct.course_id = $1 AND u.user_role_id = 1
`

type GetCourseTeachersRow struct {
	Firstname pgtype.Text `json:"firstname"`
	Surname   pgtype.Text `json:"surname"`
	Profile   pgtype.Text `json:"profile"`
}

func (q *Queries) GetCourseTeachers(ctx context.Context, courseID int64) ([]GetCourseTeachersRow, error) {
	rows, err := q.db.Query(ctx, getCourseTeachers, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCourseTeachersRow{}
	for rows.Next() {
		var i GetCourseTeachersRow
		if err := rows.Scan(&i.Firstname, &i.Surname, &i.Profile); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
