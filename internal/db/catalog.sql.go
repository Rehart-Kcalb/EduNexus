// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: catalog.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCourses = `-- name: CountCourses :one
select count(title) from filter($1,$2::bigint[])
`

type CountCoursesParams struct {
	TitleParam string  `json:"title_param"`
	Column2    []int64 `json:"column_2"`
}

func (q *Queries) CountCourses(ctx context.Context, arg CountCoursesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countCourses, arg.TitleParam, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPopularCourses = `-- name: GetPopularCourses :many
SELECT
    c.title,
    u.firstname AS organization_name,
    u.profile AS organization_logo,
    c.image
FROM
    courses c
LEFT JOIN
    users u ON u.id = c.course_provider
INNER JOIN
    (SELECT 
        course_id, 
        COUNT(user_id) AS enrolled 
     FROM 
        enrollments 
     GROUP BY 
        course_id) enrolled_counts ON enrolled_counts.course_id = c.id
ORDER BY
    enrolled_counts.enrolled DESC
`

type GetPopularCoursesRow struct {
	Title            string      `json:"title"`
	OrganizationName pgtype.Text `json:"organization_name"`
	OrganizationLogo pgtype.Text `json:"organization_logo"`
	Image            pgtype.Text `json:"image"`
}

func (q *Queries) GetPopularCourses(ctx context.Context) ([]GetPopularCoursesRow, error) {
	rows, err := q.db.Query(ctx, getPopularCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPopularCoursesRow{}
	for rows.Next() {
		var i GetPopularCoursesRow
		if err := rows.Scan(
			&i.Title,
			&i.OrganizationName,
			&i.OrganizationLogo,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
