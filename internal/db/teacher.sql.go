// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: teacher.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCategoryCourse = `-- name: AddCategoryCourse :exec
Insert into course_categories(course_id,category_id) values ($1,$2)
`

type AddCategoryCourseParams struct {
	CourseID   int64 `json:"course_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) AddCategoryCourse(ctx context.Context, arg AddCategoryCourseParams) error {
	_, err := q.db.Exec(ctx, addCategoryCourse, arg.CourseID, arg.CategoryID)
	return err
}

const addTeacher = `-- name: AddTeacher :exec
Insert into course_teachers(user_id,course_id) values ($1,$2)
`

type AddTeacherParams struct {
	UserID   int64 `json:"user_id"`
	CourseID int64 `json:"course_id"`
}

func (q *Queries) AddTeacher(ctx context.Context, arg AddTeacherParams) error {
	_, err := q.db.Exec(ctx, addTeacher, arg.UserID, arg.CourseID)
	return err
}

const createAssignment = `-- name: CreateAssignment :exec
Insert into assignments(module_id,course_id,title,description,content,assignment_type_id) values($1,$2,$3,$4,$5,$6)
`

type CreateAssignmentParams struct {
	ModuleID         int64  `json:"module_id"`
	CourseID         int64  `json:"course_id"`
	Title            string `json:"title"`
	Description      string `json:"description"`
	Content          []byte `json:"content"`
	AssignmentTypeID int64  `json:"assignment_type_id"`
}

func (q *Queries) CreateAssignment(ctx context.Context, arg CreateAssignmentParams) error {
	_, err := q.db.Exec(ctx, createAssignment,
		arg.ModuleID,
		arg.CourseID,
		arg.Title,
		arg.Description,
		arg.Content,
		arg.AssignmentTypeID,
	)
	return err
}

const createCourse = `-- name: CreateCourse :one
Insert into courses(title,description,image,course_provider) values ($1,$2,$3,$4) returning id
`

type CreateCourseParams struct {
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Image          pgtype.Text `json:"image"`
	CourseProvider int64       `json:"course_provider"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.Title,
		arg.Description,
		arg.Image,
		arg.CourseProvider,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createModule = `-- name: CreateModule :one
  Insert into 
    modules(title,course_id) values 
  ($1,$2) 
  returning id
`

type CreateModuleParams struct {
	Title    string `json:"title"`
	CourseID int64  `json:"course_id"`
}

func (q *Queries) CreateModule(ctx context.Context, arg CreateModuleParams) (int64, error) {
	row := q.db.QueryRow(ctx, createModule, arg.Title, arg.CourseID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllSubmissions = `-- name: GetAllSubmissions :many
select s.id, s.assignment_id, s.delay, s.content, s.info, s.user_id, s.submitted_at from submissions s 
left join assignments on s.assignment_id = assignments.id
left join courses on courses.id = assignments.course_id
where assignments.course_id = $1
`

func (q *Queries) GetAllSubmissions(ctx context.Context, courseID int64) ([]Submission, error) {
	rows, err := q.db.Query(ctx, getAllSubmissions, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.AssignmentID,
			&i.Delay,
			&i.Content,
			&i.Info,
			&i.UserID,
			&i.SubmittedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyTeached = `-- name: GetMyTeached :many
Select distinct(courses.id), courses.title, courses.image,courses.description from courses 
left join course_teachers on courses.id = course_teachers.course_id
where course_teachers.user_id = $1
`

type GetMyTeachedRow struct {
	ID          int64       `json:"id"`
	Title       string      `json:"title"`
	Image       pgtype.Text `json:"image"`
	Description string      `json:"description"`
}

func (q *Queries) GetMyTeached(ctx context.Context, userID int64) ([]GetMyTeachedRow, error) {
	rows, err := q.db.Query(ctx, getMyTeached, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMyTeachedRow{}
	for rows.Next() {
		var i GetMyTeachedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Image,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAssignmentDone = `-- name: MarkAssignmentDone :exec
  insert into 
    progress(assignment_id,user_id,done,pass) 
  values ($1,$2,now(),true)
`

type MarkAssignmentDoneParams struct {
	AssignmentID int64 `json:"assignment_id"`
	UserID       int64 `json:"user_id"`
}

func (q *Queries) MarkAssignmentDone(ctx context.Context, arg MarkAssignmentDoneParams) error {
	_, err := q.db.Exec(ctx, markAssignmentDone, arg.AssignmentID, arg.UserID)
	return err
}
